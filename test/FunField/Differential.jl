import Hecke: divisor

flds = [QQ, rationals_as_number_field()[1]]

@testset "Differentials" for k in flds
  kx, x = RationalFunctionField(k, "x")
  kt = parent(numerator(x))
  ky, y = polynomial_ring(kx, "y")

  F, a = function_field(y^2 - x^3 - 1, "a")
  Ofin = finite_maximal_order(F)

  d = @inferred differential(a)
  @test function_field(d) === F
  @test is_zero(d)

  @test sprint(show, "text/plain", d) == "0 d(x)"

  for i in 1:10
    u = rand(F, 1:3, -2:2)
    v = rand(F, 1:3, -2:2)
    d1 = differential(u)
    d2 = differential(v)
    @test differential(u + v) == d1 + d2
    @test differential(u - v) == d1 - d2
    @test differential(-u) == -d1
    @test differential(v * u) == v * d1
    @test differential(u * v) == d1 * v
    @test differential(2 * u) == 2 * d1
    @test differential(u * 2) == d1 * 2
    @test differential(ZZ(2) * u) == ZZ(2) * d1
    @test differential(u * ZZ(2)) == d1 * ZZ(2)
    @test differential(F(2) * u) == Ofin(2) * d1
    @test differential(u * F(2)) == d1 * Ofin(2)
    if !is_zero(d2)
      @test d2 * d1//d2 == d2
    end
    @test d1//one(F) == d1
    @test d1//1 == d1
    @test d1//ZZ(1) == d1
    @test d1//one(Ofin) == d1
  end

  d = differential(a * x)
  @test !is_zero(divisor(d))
  p1 = ideal(Ofin, x-2, Ofin(a - 3))
  @test valuation(d, p1) isa Int

  B = basis_of_differentials(F)
  @test length(B) == 1
  # It is generated by inv(a) d(x) = a//(x^3 + 1) d(x)
  # To test properly I would need the space of differentials
end
